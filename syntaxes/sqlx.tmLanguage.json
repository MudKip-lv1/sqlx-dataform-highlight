{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "SQLX (Dataform)",
  "scopeName": "source.sqlx",
  "fileTypes": ["sqlx"],
  "patterns": [
    { "include": "#template-expression" },
    { "include": "#config-block" },
    { "include": "#pre-operations" },
    { "include": "#post-operations" },
    { "include": "#comments" },
    { "include": "#strings" },
    { "include": "#functions" },
    { "include": "#punctuation" },
    { "include": "#regexps" },
    { "include": "#javascript" },
    {
      "captures": {
        "1": { "name": "keyword.other.create.sql" },
        "2": { "name": "keyword.other.sql" },
        "3": { "name": "keyword.other.DML.sql" },
        "5": { "name": "entity.name.function.sql" },
        "6": { "name": "invalid.illegal.table.delimiter.sql" }
      },
      "match": "(?i:^\\s*(create(?:\\s+or\\s+replace)?(?:\\s+temporary|\\s+temp)?|drop|alter)\\s+(schema|table(?:\\s+function)?|view|materialized\\s+view|(?:external|snapshot)\\s+table|model|function|procedure|column)\\b(?:\\s+(if(?:\\s+not)?\\s+exists)\\b)?)(?:\\s+(`?)((?:(?:[\\w\\-]*(?:\\{+\\s*[\\w\\-]+\\s*\\}+[\\w\\-]*)?)(?:\\.|(\\:)))?(?:(?:\\w*(?:\\{+\\s*[\\w\\-]+\\s*\\}+\\w*)?)\\.)?(?:[\\w\\{\\}]+|\\{\\{\\s*[\\w]+\\s*\\}\\}))\\4)?",
      "name": "meta.create.sql"
    },
    {
      "captures": {
        "1": { "name": "keyword.other.insert.sql" },
        "3": { "name": "entity.name.function.table.standard.sql" },
        "4": { "name": "invalid.illegal.table.delimiter.sql" },
        "5": { "name": "variable.parameter.table.partition_decorator.sql" }
      },
      "match": "(?i:^\\b((?:insert|merge)(?:\\s+into)?|truncate\\s+table)(?:\\s+(`?)((?:(?:[\\w\\-]*(?:\\{+\\s*[\\w\\-]+\\s*\\}+[\\w\\-]*)?)(?:\\.|(\\:)))?(?:(?:\\w*(?:\\{+\\s*[\\w\\-]+\\s*\\}+\\w*)?)\\.)?(?:\\w*(?:\\{+\\s*[\\w\\-]+\\s*\\}+\\w*)?))(\\*|\\$\\w+)?\\2)?)",
      "name": "meta.create.DML.insert.sql"
    },
    {
      "captures": {
        "1": { "name": "keyword.other.select.sql" },
        "4": { "name": "entity.name.function.table.standard.sql" },
        "5": { "name": "invalid.illegal.table.delimiter.sql" },
        "6": { "name": "variable.parameter.table.partition_decorator.sql" },
        "7": { "name": "entity.name.function.table.legacy.sql" },
        "8": { "name": "invalid.illegal.table.delimiter.sql" },
        "9": { "name": "variable.parameter.table.partition_decorator.legacy.sql" }
      },
      "match": "(?i)(from|join|delete\\s+from|delete(?!\\s+from)|update|using(?!\\s+message)|clone|on\\s+(?:schema|table|view))\\s+((`?)((?:(?:[\\w\\-]*(?:\\{+\\s*[\\w\\-]+\\s*\\}+[\\w\\-]*)?)(?:\\.|(\\:)))?(?:(?:\\w*(?:\\{+\\s*[\\w\\-]+\\s*\\}+\\w*)?)\\.)?(?:INFORMATION_SCHEMA\\.\\w+|\\w*(?:\\{+\\s*[\\w\\-]+\\s*\\}+\\w*)?))(\\*|\\$\\w+)?\\3?|\\[((?:(?:[\\w\\-]*(?:\\{+\\s*[\\w\\-]+\\s*\\}+[\\w\\-]*)?)(?:\\:|(\\.)))?(?:(?:\\w*(?:\\{+\\s*[\\w\\-]+\\s*\\}+\\w*)?)\\.)?(?:\\w*(?:\\{+\\s*[\\w\\-]+\\s*\\}+\\w*)?))(\\*|\\$\\w+)?\\])",
      "name": "meta.create.from.sql"
    },
    {
      "captures": {
        "1": { "name": "keyword.other.insert.sql" },
        "3": { "name": "entity.name.function.table.standard.sql" },
        "4": { "name": "invalid.illegal.table.delimiter.sql" },
        "5": { "name": "variable.parameter.table.partition_decorator.sql" }
      },
      "match": "(?i:\\b(model|call)\\s+(?:(`?)((?:(?:[\\w\\-]*(?:\\{+\\s*[\\w\\-]+\\s*\\}+[\\w\\-]*)?)(?:\\.|(\\:)))?(?:(?:\\w*(?:\\{+\\s*[\\w\\-]+\\s*\\}+\\w*)?)\\.)?(?:\\w*(?:\\{+\\s*[\\w\\-]+\\s*\\}+\\w*)?))(\\*|\\$\\w+)?\\2)?)",
      "name": "meta.other.table.ml_procedure.sql"
    },
    {
      "captures": {
        "2": { "name": "entity.name.function.table.standard.sql" },
        "3": { "name": "invalid.illegal.table.delimiter.sql" },
        "4": { "name": "variable.parameter.table.partition_decorator.sql" },
        "5": { "name": "entity.name.function.table.legacy.sql" },
        "6": { "name": "invalid.illegal.table.delimiter.sql" },
        "7": { "name": "variable.parameter.table.partition_decorator.legacy.sql" }
      },
      "match": "^\\s*(?:(`)((?:(?:[\\w\\-]*(?:\\{+\\s*[\\w\\-]+\\s*\\}+[\\w\\-]*)?)(?:\\.|(\\:)))?(?:(?:\\w*(?:\\{+\\s*[\\w\\-]+\\s*\\}+\\w*)?)\\.)?(?:INFORMATION_SCHEMA\\.\\w+|(?:\\w*(?:\\{+\\s*[\\w\\-]+\\s*\\}+\\w*)?)))(\\*|\\$\\w+)?\\1|\\[((?:(?:[\\w\\-]*(?:\\{+\\s*[\\w\\-]+\\s*\\}+[\\w\\-]*)?)(?:\\:|(\\.)))?(?:(?:\\w*(?:\\{+\\s*[\\w\\-]+\\s*\\}+\\w*)?)\\.)?(?:\\w*(?:\\{+\\s*[\\w\\-]+\\s*\\}+\\w*)?))(\\*|\\$\\w+)?\\])",
      "name": "meta.other.table.sql"
    },
    {
      "captures": {
        "1": { "name": "keyword.other.merge.sql" }
      },
      "match": "(?i)(\\b(?:by)\\s+(?:target|source)\\b)",
      "name": "meta.create.DML.merge.sql"
    },
    {
      "match": "(?i)\\b(array|boolean|bytes|date(?!\\s*\\()|datetime(?!\\s*\\()|geography|numeric|decimal|bignumeric|bigdecimal|float|float64|int64|int|smallint|integer|bigint|tinyint|byteint|bool|record|any\\s+type|string(?!\\s*\\()|struct|time(?!\\s*\\(|\\s+as\\s+of|\\s+zone)|timestamp(?!\\s*\\())\\b",
      "name": "storage.type.sql"
    },
    {
      "match": "\\b(\\d+\\.\\d+)|(\\d+\\.)|(\\.\\d+)|\\b(\\d+)|(?i:(true|false))\\b",
      "name": "constant.numeric.sql"
    },
    {
      "match": "(?i)\\bAS\\b",
      "name": "keyword.other.alias.sql"
    },
    {
      "match": "(?i)\\b(desc|asc)\\b",
      "name": "keyword.other.order.sql"
    },
    {
      "match": "(?i)\\b(case|when|then|else|end)\\b",
      "name": "keyword.other.case.sql"
    },
    {
      "match": "\\*",
      "name": "keyword.operator.star.sql"
    },
    {
      "match": "[!<>]?=|<>|<|>",
      "name": "keyword.operator.comparison.sql"
    },
    {
      "match": "-|\\+|/|~",
      "name": "keyword.operator.math.sql"
    },
    {
      "match": "\\|\\|",
      "name": "keyword.operator.concatenator.sql"
    },
    {
      "match": "<<|>>|\\&|\\^|\\|",
      "name": "keyword.operator.byte.sql"
    },
    {
      "match": "%",
      "name": "invalid.deprecated.legacy.operator.sql"
    },
    {
      "match": "(?i:\\b(select|all|distinct|except|replace|from|where|in|is|null|like|between|and|or|with|group|by|rollup|order|limit|having|window)\\b)",
      "name": "keyword.other.select.sql"
    },
    {
      "match": "(?i:\\b(union|intersect|for|system|time|of|offset|system_time|tablesample|percent)\\b)",
      "name": "keyword.other.select.set_op.sql"
    },
    {
      "match": "(?i:\\b(inner|cross|full|left|right|outer|join|on|using)\\b)",
      "name": "keyword.other.select.join.sql"
    },
    {
      "match": "(?i:\\bfor\\s+system\\s+time\\s+as\\s+of\\b)",
      "name": "keyword.other.select.other.sql"
    },
    {
      "match": "(?i:\\b(insert|into|values|delete|update|set)\\b)",
      "name": "keyword.other.DML.sql"
    },
    {
      "match": "(?i:\\b(create(\\s+(temporary|temp))?|drop(\\s+column)?|schema|table(?:\\s+function)?|view|materialized(\\s+view)?|external\\s+table|snapshot|clone|if|not|exists|partition|cluster|options|data\\s+type|rows|range|unbounded|preceding|following|current|row|returns|language|deterministic|(\\s*or\\s+replace\\s+)?(function|procedure|model)(\\s*if\\s+not\\s+exists\\s+)?|(add|drop)\\s+column|cascade|restrict|rename|to)\\b)",
      "name": "keyword.other.DDL.sql"
    },
    {
      "match": "(?i:\\b(grant|revoke)\\b)",
      "name": "keyword.other.DCL.sql"
    },
    {
      "match": "(?i:\\b(merge|matched|default|truncate)\\b)",
      "name": "keyword.other.DML.merge.sql"
    },
    {
      "match": "(?i:\\b(assert|export\\s+data|pivot|unpivot|qualify|include|exclude)\\b)",
      "name": "keyword.other.statement.sql"
    },
    {
      "match": "(?i:\\b(over|ignore|respect|nulls|first|last|interval|at|zone|at\\s+time\\s+zone)\\b)",
      "name": "keyword.other.function.sql"
    },
    {
      "match": "(?i:\\b(procedure|begin|exception|error[^\\.\\(]|out|inout|call|declare|if|elseif|end\\s+if|loop|while|do|break|leave|continue|iterate|return|execute|immediate|raise|message)\\b)",
      "name": "keyword.other.procedure.sql"
    },
    {
      "captures": {
        "1": { "name": "constant.other.database-name.sql" },
        "2": { "name": "punctuation.separator.period.sql" },
        "3": { "name": "constant.other.table-name.sql" }
      },
      "match": "(\\w+?)(\\.)(\\w+)"
    }
  ],
  "repository": {
    "template-expression": {
      "patterns": [
        {
          "name": "meta.interpolation.sqlx",
          "begin": "\\{\\{",
          "end": "\\}\\}",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.template.begin.sqlx"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.template.end.sqlx"
            }
          },
          "patterns": [
            {
              "name": "support.function.ref.sqlx",
              "match": "\\bref\\b"
            },
            {
              "name": "support.function.resolve.sqlx",
              "match": "\\bresolve\\b"
            },
            {
              "name": "support.function.self.sqlx",
              "match": "\\bself\\b"
            },
            {
              "name": "support.function.when.sqlx",
              "match": "\\bwhen\\b"
            },
            {
              "name": "support.function.incremental.sqlx",
              "match": "\\bincremental\\b"
            },
            {
              "name": "variable.other.sqlx",
              "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
            },
            {
              "name": "punctuation.definition.parameters.sqlx",
              "match": "[(),]"
            },
            {
              "name": "string.quoted.double.sqlx",
              "begin": "\"",
              "end": "\"",
              "patterns": [
                {
                  "name": "constant.character.escape.sqlx",
                  "match": "\\\\."
                }
              ]
            },
            {
              "name": "string.quoted.single.sqlx",
              "begin": "'",
              "end": "'",
              "patterns": [
                {
                  "name": "constant.character.escape.sqlx",
                  "match": "\\\\."
                }
              ]
            },
            {
              "name": "constant.numeric.sqlx",
              "match": "\\b\\d+(\\.\\d+)?\\b"
            },
            {
              "name": "constant.language.boolean.sqlx",
              "match": "\\b(true|false|null)\\b"
            },
            {
              "name": "punctuation.accessor.sqlx",
              "match": "\\."
            },
            {
              "name": "keyword.operator.logical.sqlx",
              "match": "\\|\\||&&|!"
            },
            {
              "name": "keyword.operator.comparison.sqlx",
              "match": "==|!=|<=|>=|<|>"
            },
            {
              "name": "keyword.operator.arithmetic.sqlx",
              "match": "\\+|\\-|\\*|/|%"
            }
          ]
        }
      ]
    },
    "config-block": {
      "patterns": [
        {
          "name": "meta.block.config.sqlx",
          "begin": "^\\s*(config)\\s*\\{",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.config.sqlx"
            }
          },
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.block.end.sqlx"
            }
          },
          "patterns": [
            {
              "name": "variable.parameter.config.sqlx",
              "match": "\\b(type|schema|tags|materialized|description|database|name|hasOutput|columns|bigquery|disabled|dependencies|hermetic|protected|filename|uniqueKey|incrementalPartitionFilter|partitionBy|clusterBy|preOperations|postOperations|assertions|where|rowConditions|nonNull|acceptedValues|uniqueConstraints|primaryKey|foreignKeys)\\b"
            },
            {
              "name": "punctuation.separator.key-value.sqlx",
              "match": ":"
            },
            {
              "name": "punctuation.separator.comma.sqlx",
              "match": ","
            },
            {
              "name": "string.quoted.double.sqlx",
              "begin": "\"",
              "end": "\"",
              "patterns": [
                {
                  "name": "constant.character.escape.sqlx",
                  "match": "\\\\."
                }
              ]
            },
            {
              "name": "string.quoted.single.sqlx",
              "begin": "'",
              "end": "'",
              "patterns": [
                {
                  "name": "constant.character.escape.sqlx",
                  "match": "\\\\."
                }
              ]
            },
            {
              "name": "constant.language.boolean.sqlx",
              "match": "\\b(true|false|null)\\b"
            },
            {
              "name": "constant.numeric.sqlx",
              "match": "\\b\\d+(\\.\\d+)?\\b"
            },
            {
              "name": "punctuation.section.brackets.sqlx",
              "match": "[\\[\\]]"
            },
            {
              "name": "punctuation.section.braces.sqlx",
              "match": "[\\{\\}]"
            },
            {
              "include": "#comments"
            }
          ]
        }
      ]
    },
    "pre-operations": {
      "patterns": [
        {
          "name": "meta.block.pre-operations.sqlx",
          "begin": "^\\s*(pre_operations)\\s*\\{",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.pre-operations.sqlx"
            }
          },
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.block.end.sqlx"
            }
          },
          "patterns": [
            {
              "include": "#template-expression"
            },
            {
              "include": "#strings"
            },
            {
              "include": "#comments"
            },
            {
              "include": "#sql-content"
            }
          ]
        }
      ]
    },
    "post-operations": {
      "patterns": [
        {
          "name": "meta.block.post-operations.sqlx",
          "begin": "^\\s*(post_operations)\\s*\\{",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.post-operations.sqlx"
            }
          },
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.block.end.sqlx"
            }
          },
          "patterns": [
            {
              "include": "#template-expression"
            },
            {
              "include": "#strings"
            },
            {
              "include": "#comments"
            },
            {
              "include": "#sql-content"
            }
          ]
        }
      ]
    },
    "sql-content": {
      "patterns": [
        {
          "match": "(?i)\\b(SELECT|FROM|WHERE|GROUP|BY|ORDER|INSERT|UPDATE|DELETE|JOIN|LEFT|RIGHT|FULL|OUTER|INNER|CROSS|ON|AS|AND|OR|NOT|IN|IS|NULL|CASE|WHEN|THEN|ELSE|END|DISTINCT|LIMIT|OFFSET|HAVING|UNION|ALL|EXISTS|BETWEEN|LIKE|WITH|VALUES|CREATE|TABLE|VIEW|REPLACE|IF|PRIMARY|KEY|FOREIGN|REFERENCES|DEFAULT|CHECK|CONSTRAINT|UNIQUE|ALTER|DROP|TRUNCATE|ADD|COLUMN|SET|EXCEPT|INTERSECT|CAST|DESC|ASC|OVER|PARTITION|RANGE|ROWS|PRECEDING|FOLLOWING|CURRENT|ROW|UNBOUNDED|STRUCT|ARRAY|INT64|NUMERIC|FLOAT64|BOOL|STRING|DATE|TIMESTAMP|DATETIME|TIME|GEOGRAPHY|JSON)\\b",
          "name": "keyword.control.sql"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "begin": "(^[ \\t]+)?(?=--)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.sql"
            }
          },
          "end": "(?!\\G)",
          "patterns": [
            {
              "begin": "--",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.comment.sql"
                }
              },
              "end": "\\n",
              "name": "comment.line.double-dash.sql"
            }
          ]
        },
        {
          "begin": "(^[ \\t]+)?(?=#)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.sql"
            }
          },
          "end": "(?!\\G)",
          "patterns": [
            {
              "begin": "#",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.comment.sql"
                }
              },
              "end": "\\n",
              "name": "comment.line.number-sign.sql"
            }
          ]
        },
        {
          "begin": "/\\*",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.sql"
            }
          },
          "end": "\\*/",
          "name": "comment.block.c"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "begin": "\\(",
          "end": "\\)",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.section.bracket.round.begin.sql"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.section.bracket.round.end.sql"
            }
          },
          "patterns": [
            {
              "include": "$self"
            }
          ]
        },
        {
          "match": "\\)",
          "name": "punctuation.unmatched.bracket.round.end.sql"
        },
        {
          "match": ",",
          "name": "punctuation.separator.comma.sql"
        },
        {
          "match": "\\.",
          "name": "punctuation.separator.period.sql"
        },
        {
          "match": ";",
          "name": "punctuation.terminator.statement.semicolon.sql"
        }
      ]
    },
    "regexps": {
      "patterns": [
        {
          "begin": "r[\"]",
          "beginCaptures": {
            "0": {
              "name": "storage.type.string.regex.begin.sql"
            }
          },
          "end": "[\"]",
          "endCaptures": {
            "0": {
              "name": "storage.type.string.regex.end.sql"
            }
          },
          "name": "meta.regex.sql",
          "contentName": "string.regexp.sql",
          "patterns": [
            {
              "include": "#string_interpolation"
            },
            {
              "include": "#string_escape"
            }
          ]
        },
        {
          "begin": "r[']",
          "beginCaptures": {
            "0": {
              "name": "storage.type.string.regex.begin.sql"
            }
          },
          "end": "[']",
          "endCaptures": {
            "0": {
              "name": "storage.type.string.regex.end.sql"
            }
          },
          "name": "meta.regex.sql",
          "contentName": "string.regexp.sql",
          "patterns": [
            {
              "include": "#string_interpolation"
            },
            {
              "include": "#string_escape"
            }
          ]
        }
      ]
    },
    "javascript": {
      "patterns": [
        {
          "begin": "(?i:\\b(as)\\s+)r{0,1}(\"\"\")",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.alias.sql"
            },
            "2": {
              "name": "string.quoted.double.begin.sql"
            }
          },
          "end": "\"\"\"",
          "endCaptures": {
            "0": {
              "name": "string.quoted.double.end.sql"
            }
          },
          "name": "meta.embedded.js",
          "contentName": "source.embedded.js",
          "patterns": [
            {
              "include": "source.js"
            }
          ]
        }
      ]
    },
    "string_escape": {
      "match": "\\\\.",
      "name": "constant.character.escape.sql"
    },
    "string_interpolation": {
      "captures": {
        "1": {
          "name": "punctuation.definition.string.end.sql"
        }
      },
      "match": "(#\\{)([^\\}]*)(\\})",
      "name": "string.interpolated.sql"
    },
    "strings": {
      "patterns": [
        {
          "captures": {
            "1": {
              "name": "punctuation.definition.string.begin.sql"
            },
            "2": {
              "name": "punctuation.definition.string.end.sql"
            }
          },
          "comment": "this is faster than the next begin/end rule since sub-pattern will match till end-of-line and SQL files tend to have very long lines.",
          "match": "(')[^'\\\\]*(')",
          "name": "string.quoted.single.sql"
        },
        {
          "begin": "'",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.sql"
            }
          },
          "end": "'",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.sql"
            }
          },
          "name": "string.quoted.single.sql",
          "patterns": [
            {
              "include": "#string_escape"
            }
          ]
        },
        {
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.sql"
            }
          },
          "end": "\"",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.sql"
            }
          },
          "name": "string.quoted.double.sql",
          "patterns": [
            {
              "include": "#string_escape"
            }
          ]
        },
        {
          "captures": {
            "1": {
              "name": "punctuation.definition.string.begin.sql"
            },
            "2": {
              "name": "punctuation.definition.string.end.sql"
            }
          },
          "comment": "this is faster than the next begin/end rule since sub-pattern will match till end-of-line and SQL files tend to have very long lines.",
          "match": "(`)[^`\\\\]*(`)",
          "name": "string.quoted.other.backtick.sql"
        },
        {
          "begin": "`",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.sql"
            }
          },
          "end": "`",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.sql"
            }
          },
          "name": "string.quoted.other.backtick.sql",
          "patterns": [
            {
              "include": "#string_escape"
            }
          ]
        },
        {
          "captures": {
            "1": {
              "name": "punctuation.definition.string.begin.sql"
            },
            "2": {
              "name": "punctuation.definition.string.end.sql"
            }
          },
          "comment": "this is faster than the next begin/end rule since sub-pattern will match till end-of-line and SQL files tend to have very long lines.",
          "match": "(\")[^\"#]*(\")",
          "name": "string.quoted.double.sql"
        },
        {
          "begin": "%\\{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.sql"
            }
          },
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.sql"
            }
          },
          "name": "string.quoted.other.percent.sql",
          "patterns": [
            {
              "include": "#string_escape"
            }
          ]
        }
      ]
    }
  }
}